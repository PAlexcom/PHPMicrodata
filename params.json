{"name":"PHPStructureData","tagline":"A PHP library to implement and output http://schema.org microdata semantics.","body":"PHPStructuredData [![Build Status](https://travis-ci.org/PAlexcom/PHPStructuredData.svg)](https://travis-ci.org/PAlexcom/PHPStructuredData)\r\n============\r\nA PHP library to implement and output http://schema.org microdata semantics.    \r\nThis library was merged in the Joomla master branch and now available from version 3.2 (called [JMicrodata](https://github.com/joomla/joomla-cms/tree/master/libraries/joomla/microdata \"JMicrodata\")).  \r\nCreated during the Google Summer of Code 2013 for my Joomla! project.  \r\n\r\nQuick overview\r\n--------------\r\nThe library was designed with this goals in mind:  \r\n1. __Having the possibility to switch the Microdata Type dynamically__, you just change the Type (there are more than 550+ different available Types).  \r\n2. Display  __validated semantics__, the library takes care of displaying data in the correct format (e.g. all the dates in the ISO standard).  \r\n3. __Enable/disable the microdata__ semantics.  \r\n4. __Fallbacks__, you should never lose any meaningful semantic (e.g. if you switch the page type and it doesn’t have an author property it will fallback to the Person type with the name property).  \r\n  \r\nExample\r\n-------\r\nLet's suppose that you allready use an istance of ```$microdata = new PHPStructuredData($type);``` the following code which is part of your article, and __you've selected__ ```$type=\"article\"``` __the Article type__.\r\n```php\r\n<div <?php echo $microdata->displayScope();?>>\r\n\t<!-- Author of the content -->\r\n    <span>\r\n    \tWritten by <?php echo $microdata->content('Alexandru Pruteanu')->property('author')->fallback('Person', 'name')->display();?>\r\n    </span>\r\n    <!-- The content -->\r\n    <?php echo $microdata->content('Here is the article text...')->property('articleBody')->display();?>\r\n<div>\r\n```\r\nIt will render:\r\n```html\r\n<div itemscope itemtype='https://schema.org/Article'>\r\n    <!-- Author of the content -->\r\n    <span>\r\n    \tWritten by\r\n        <span itemprop='author' itemscope itemtype='https://schema.org/Person'>\r\n            <span itemprop='name'>Alexandru Pruteanu</span>\r\n        </span>\r\n    </span>\r\n    <!-- The content -->\r\n    <span itemprop='articleBody'>Here is the article text...</span>\r\n<div>\r\n```\r\nInstead, if you decide to change the current Type, let's say __you change in__ ```$type=\"thing\"```  __the Thing type__\r\nIt will render:\r\n```html\r\n<div itemscope itemtype='https://schema.org/Thing'>\r\n    <!-- Author of the content -->\r\n    <span>\r\n    \tWritten by\r\n        <span itemscope itemtype='https://schema.org/Person'>\r\n            <span itemprop='name'>Alexandru Pruteanu</span>\r\n        </span>\r\n    </span>\r\n    <!-- The content -->\r\n    Here is the article text...\r\n<div>\r\n```\r\nAs you can see ```Alexandru Pruteanu``` __fallbacks__ to the Person type, and there is no loss of information, even if the current Type doesn't have an ```author``` Property it will display important semantic information for the machines, the search engines know that there is a Person ```Alexandru Pruteanu```. And everything is valid, done fast and automatically.\r\nInstead, if you don't need all that microdata information, __you just disable that feature__ ```$microdata->enable(false)```.\r\nIt will render:\r\n```html\r\n<div>\r\n    <!-- Author of the content -->\r\n    <span>Written by Alexandru Pruteanu</span>\r\n    <!-- The content -->\r\n    Here is the article text...\r\n<div>\r\n```\r\nOnce again everything is done by the library. You don't need 558 different overrides, you just play with the global params.\r\n\r\nDocumentation\r\n-------------\r\n```PHPStructuredData``` library uses the ```types.json``` file to check and output validated Microdata semantics, that file was automatically created with the https://github.com/PAlexcom/Spider4Schema web crawler.   \r\n      \r\nFor further documentation on ```PHPStructuredData``` see http://docs.joomla.org/microdata    \r\n  \r\n\r\nUsage\r\n-----\r\nFirst of all you need to make an instance of the library:  \r\n```php\r\n<?php $microdata = new PHPMicrodata('Article'); ?>\r\n```\r\nSo let's suppose that you have the following _string_ which is part of your article and the current scope is _Article_:   \r\n```php\r\n<?php echo 'Written by Alexandru Pruteanu'; ?>\r\n```  \r\nAnd the microdata you need to add is an _author_ property:   \r\n```php\r\n<?php echo 'Written by ' . $microdata->content('Alexandru Pruteanu')->property('author')->fallback('Person', 'name')->display(); ?>\r\n```  \r\nThe library will display:  \r\n```html\r\nWritten by  \r\n<span itemprop='author' itemscope itemtype='https://schema.org/Person'>\r\n\t<span itemprop='name'>\r\n\t\tAlexandru Pruteanu\r\n\t</span>\r\n</span>\r\n```\r\n— What happens if the current scope is something else than _Article_, for example a _Product_ scope, and the current scope doesn't have an author property?  \r\nWell it will fallback in:  \r\n```html\r\nWritten by\r\n<span itemscope itemtype='https://schema.org/Person'>\r\n\t<span itemprop='name'>\r\n\t\tAlexandru Pruteanu\r\n\t</span>\r\n</span>\r\n```\r\n— If I want to disable the microdata semantics output?  \r\nYou can simply disable the microdata output by calling the following function:  \r\n```php\r\n<?php $microdata->enable(false); ?>\r\n```  \r\nThe library will display the following:   \r\n```html\r\nWritten by Alexandru Pruteanu\r\n```  \r\n\r\nLicense\r\n-------\r\nPHPStructuredData is licensed under the MIT License - see the LICENSE file for details.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}